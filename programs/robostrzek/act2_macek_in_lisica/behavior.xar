<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3">
    <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
        <bitmap>media/images/box/root.png</bitmap>
        <script language="4">
            <content>
                <![CDATA[]]>
</content>
        </script>
        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
        <Timeline enable="0">
            <BehaviorLayer name="behavior_layer1">
                <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                        <Box name="Speech Sync" id="8" localization="8" tooltip="Enter description here" x="723" y="132">
                            <bitmap>media/images/box/box-diagram.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                            <Input name="wait 1_onStart" type="1" type_size="1" nature="2" inner="0" tooltip="This input has been automatically generated&#x0A;by converting several boxes into a single box." id="2" />
                            <Output name="WaitForSignals_signalsReceived" type="1" type_size="1" nature="2" inner="0" tooltip="This output has been automatically generated&#x0A;by converting several boxes into a single box." id="3" />
                            <Parameter name="Audio File" inherits_from_parent="0" content_type="4" value="/../wav/ZivjoPlocevinko.ogg" default_value="" tooltip="" id="4" />
                            <Parameter name="Markers File" inherits_from_parent="0" content_type="4" value="/../wav/ZivjoPlocevinko.txt" default_value="" tooltip="" id="5" />
                            <Timeline enable="0">
                                <BehaviorLayer name="behavior_layer1">
                                    <BehaviorKeyframe name="keyframe1" index="1">
                                        <Diagram>
                                            <Box name="run gestures RT" id="7" localization="8" tooltip="" x="570" y="151">
                                                <bitmap>media/images/box/box-python-script.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote
        self.bmanager = ALProxy("ALBehaviorManager")
        self.framemanager = ALProxy("ALFrameManager")


    def onLoad(self):
        self.audioID = None
        self.audioFilename = None
        self.markersFilename = None
        self.markers = None


    def onUnload(self):
        if self.audioID is not None:
            try:
                self.playerStop.stop(self.audioID)
            except Exception as e:
                self.logger.info('Cannot stop: ' + str(e))
        self.audioID = None
        self.audioFilename = None
        self.markersFilename = None
        self.markers = None


    def onInput_audioFname(self, fn):
        self.audioFilename = str(self.framemanager.getBehaviorPath(self.behaviorId) + fn)


    def onInput_markersFname(self, fn):
        self.markersFilename = str(self.framemanager.getBehaviorPath(self.behaviorId) + fn)

        markers = []
        with open(self.markersFilename) as fp:
            for line in fp:
                line = line.strip()
                if (not line) or line.startswith('#'):
                    continue
                data = line.split()
                markers.append((float(data[0]), str(data[1])))
        self.markers = markers


    def onInput_onStart(self):
        from time import time, sleep
        #import numpy as np

        if self.audioFilename is None or self.markersFilename is None:
            self.logger.error('run gesture: not all input files are present!')
            return

#        times = np.array([x[0] for x in self.markers])
        times = []
        for x in self.markers: times.append(x[0])
        # if the closest marker is farther away do not start its gesture
        maxDiff = float(self.getParameter("max distance to closest"))
        stopPrev = bool(self.getParameter("stop previous behaviour"))
#        delay = float(self.getParameter("sleep delay"))

        self.audioID = self.player.post.playFile(self.audioFilename)

        start = time()
        currGesture = None
        while True: #   time()-start <= max(times):  +0.2
            tdif = time()-start
            #diffs = np.abs(times-tdif)
            diffs = []
            for t in times: diffs.append(abs(t-tdif))
            iClosest = diffs.index(min(diffs))
            #iClosest = np.argmin(diffs)
            diff = diffs[iClosest]
            if diff < maxDiff:
                pos, gesture = self.markers[iClosest]
                if gesture != currGesture:
                    if stopPrev:
                        if currGesture is not None:
                            self.bmanager.stopBehavior(str(currGesture))
                    if not self.bmanager.isBehaviorRunning(str(currGesture)):
                        currGesture = gesture
                        #self.nextGesture(currGesture)
                        #st = time()
                        #while (not self.bmanager.isBehaviorRunning(str(currGesture))) or time()-st > 3: sleep(0.1)
                        self.bmanager.preloadBehavior(str(currGesture))
                        self.bmanager.startBehavior(str(currGesture))
            if iClosest==len(times)-1: # we assume that timestamps are ordered!
                break
            else:
                delay = times[iClosest+1]-times[iClosest]-0.001
#                self.logger.warning('***> sleeping for ' + str(delay))
                sleep(delay)
        #end

        # wait for all to finish
        while self.bmanager.isBehaviorRunning(str(currGesture)):
            sleep(0.2)
        self.player.wait(self.audioID,0)

        self.onStopped()
    #end

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                                                <Input name="markersFname" type="3" type_size="1" nature="1" inner="0" tooltip="" id="4" />
                                                <Input name="audioFname" type="3" type_size="1" nature="1" inner="0" tooltip="" id="5" />
                                                <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="6" />
                                                <Output name="nextGesture" type="3" type_size="1" nature="2" inner="0" tooltip="" id="7" />
                                                <Parameter name="max distance to closest" inherits_from_parent="0" content_type="2" value="1" default_value="1.01" min="0" max="10" tooltip="the closest gesture won&apos;t start it its start time is farther than this away" id="8" />
                                                <Parameter name="sleep delay" inherits_from_parent="0" content_type="2" value="0.33" default_value="0.33" min="0" max="5" tooltip="sleep this amount of time in the busy waiting loop&#x0A;INFO: this is currently ignored!" id="9" />
                                                <Parameter name="stop previous behaviour" inherits_from_parent="0" content_type="0" value="1" default_value="0" tooltip="if set, the current behaviour will be forcibly stopped and the next one will be started&#x0A;WARNING: may lead to instability! Do not complain later, you have been warned :D" id="10" />
                                            </Box>
                                            <Box name="wait 1" id="14" localization="8" tooltip="Wait a moment before triggering the output. &#x0A;Can be stopped anytime. &#x0A;Multiple inputs will trigger multiple outputs." x="338" y="57">
                                                <bitmap>media/images/box/wait.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.delayed = []

    def onUnload(self):
        self.cancelDelays()

    def cancelDelays(self):
        cancel_list = list(self.delayed)
        for d in cancel_list:
            d.cancel()

    def cleanDelay(self, fut, fut_ref):
        self.delayed.remove(fut)

    def triggerOutput(self):
        self.timerOutput()

    def onInput_onStart(self):
        import qi
        import functools
        delay_future = qi.async(self.triggerOutput, delay=int(self.getParameter("Timeout (s)") * 1000 * 1000))
        # keep the async operation in an array for cancel
        # and remove it when it is finished in the callback
        self.delayed.append(delay_future)
        bound_clean = functools.partial(self.cleanDelay, delay_future)
        delay_future.addCallback(bound_clean)

    def onInput_onStop(self):
        if self.getParameter("Trigger timerOutput if cancelled") and self.delayed:
            self.timerOutput()
        self.onUnload()]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Start the Delay box with the configured timeout value." id="2" />
                                                <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stop the wait and stimulate the output." id="3" />
                                                <Output name="timerOutput" type="1" type_size="1" nature="1" inner="0" tooltip="Send a bang once delay set in parameters is elapsed, or if the box is stopped and the appropriate parameter is set." id="4" />
                                                <Parameter name="Timeout (s)" inherits_from_parent="0" content_type="2" value="0.1" default_value="1" min="0" max="5000" tooltip="Duration the box waits before stimulating the output." id="5" />
                                                <Parameter name="Trigger timerOutput if cancelled" inherits_from_parent="0" content_type="0" value="0" default_value="1" tooltip="If the box is currently delaying at least one signal and cancelled, output will be stimulated." id="6" />
                                            </Box>
                                            <Box name="Get Parameter" id="1" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="267" y="158">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Markers File" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                            </Box>
                                            <Box name="Get Parameter (1)" id="2" localization="8" tooltip="Return the value of the parent box parameter. Set the name of the parameter you want to be returned in parameters of this box.&#x0A;&#x0A;V1.1.0&#x0A;" x="274" y="266">
                                                <bitmap>media/images/box/box-diagram.png</bitmap>
                                                <script language="4">
                                                    <content>
                                                        <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onGet(self):
        try:
            self.onData(self.getParameter(self.getParameter("Parameter name"))) #~ activate output of the box
        except:
            self.logger.error("No parameter found")
            self.onData("Error")
        pass]]>
</content>
                                                </script>
                                                <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                                                <Input name="onGet" type="1" type_size="1" nature="1" inner="0" tooltip="To send the value on the output." id="2" />
                                                <Output name="onData" type="0" type_size="1" nature="2" inner="0" tooltip="The value of the parameter." id="3" />
                                                <Parameter name="Parameter name" inherits_from_parent="0" content_type="3" value="Audio File" default_value="" custom_choice="0" tooltip="Name of the parent box parameter you want the value to be returned." id="4" />
                                            </Box>
                                            <Link inputowner="7" indexofinput="2" outputowner="14" indexofoutput="4" />
                                            <Link inputowner="14" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="7" indexofinput="4" outputowner="1" indexofoutput="3" />
                                            <Link inputowner="7" indexofinput="5" outputowner="2" indexofoutput="3" />
                                            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" />
                                            <Link inputowner="0" indexofinput="3" outputowner="7" indexofoutput="6" />
                                        </Diagram>
                                    </BehaviorKeyframe>
                                </BehaviorLayer>
                            </Timeline>
                        </Box>
                        <Box name="Move To (4)" id="5" localization="8" tooltip="Make the robot move to a configured point relative to its current location." x="409" y="134">
                            <bitmap>media/images/box/movement/walk_forward.png</bitmap>
                            <script language="4">
                                <content>
                                    <![CDATA[
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.motion = ALProxy("ALMotion")
        self.positionErrorThresholdPos = 0.01
        self.positionErrorThresholdAng = 0.03

    def onLoad(self):
        pass

    def onUnload(self):
        self.motion.moveToward(0.0, 0.0, 0.0)

    def onInput_onStart(self):
        import almath
        # The command position estimation will be set to the sensor position
        # when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motion.getRobotPosition(True))
        targetDistance = almath.Pose2D(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = self.getParameter("Arms movement enabled")
        self.motion.setMoveArmsEnabled(enableArms, enableArms)
        self.motion.moveTo(self.getParameter("Distance X (m)"),
            self.getParameter("Distance Y (m)"),
            self.getParameter("Theta (deg)") * almath.PI / 180)

        # The move is finished so output
        realEndPosition = almath.Pose2D(self.motion.getRobotPosition(False))
        positionError = realEndPosition.diff(expectedEndPosition)
        positionError.theta = almath.modulo2PI(positionError.theta)
        if (abs(positionError.x) < self.positionErrorThresholdPos
            and abs(positionError.y) < self.positionErrorThresholdPos
            and abs(positionError.theta) < self.positionErrorThresholdAng):
            self.onArrivedAtDestination()
        else:
            self.onStoppedBeforeArriving(positionError.toVector())

    def onInput_onStop(self):
        self.onUnload()]]>
</content>
                            </script>
                            <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                            <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                            <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                            <Output name="onArrivedAtDestination" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot arrives at its destination." id="4" />
                            <Output name="onStoppedBeforeArriving" type="0" type_size="1" nature="1" inner="0" tooltip="Signal sent when the robot stops before arriving to its destination. Returns a vector [x (m), y (m), theta(rad)] with the remaining distance up to the destination. This distance is expressed in the ROBOT frame." id="5" />
                            <Parameter name="Distance X (m)" inherits_from_parent="0" content_type="2" value="0.8" default_value="0.2" min="-5" max="10" tooltip="The distance in meters for forward/backward motion. Positive value&#x0A;means forward, negative value means backward." id="6" />
                            <Parameter name="Distance Y (m)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-5" max="5" tooltip="The distance in meters for lateral motion. Positive value means left, negative&#x0A;value means right." id="7" />
                            <Parameter name="Theta (deg)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-180" max="180" tooltip="The orientation in degrees for final rotation. Positive value means anticlockwise,&#x0A;negative value means clockwise." id="8" />
                            <Parameter name="Arms movement enabled" inherits_from_parent="0" content_type="0" value="1" default_value="1" tooltip="Enables natural motion of the arms." id="9" />
                            <Resource name="Legs" type="Lock" timeout="0" />
                        </Box>
                        <Link inputowner="0" indexofinput="4" outputowner="8" indexofoutput="3" />
                        <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="4" />
                        <Link inputowner="8" indexofinput="2" outputowner="5" indexofoutput="5" />
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
        </Timeline>
    </Box>
</ChoregrapheProject>
